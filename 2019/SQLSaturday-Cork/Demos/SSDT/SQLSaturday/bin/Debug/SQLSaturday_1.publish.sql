/*
Deployment script for SQLSaturday

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SQLSaturday"
:setvar DefaultFilePrefix "SQLSaturday"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 30), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [dbo].[Country]...';


GO
CREATE TABLE [dbo].[Country] (
    [countryId]   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [countryCode] VARCHAR (2)   NOT NULL,
    [countryName] VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_Country_countryID] PRIMARY KEY CLUSTERED ([countryId] ASC)
);


GO
PRINT N'Creating [dbo].[Customer]...';


GO
CREATE TABLE [dbo].[Customer] (
    [CustomerID] INT            NOT NULL,
    [Name]       NVARCHAR (200) NOT NULL,
    [Phone]      NVARCHAR (25)  NOT NULL,
    [Email]      VARCHAR (50)   NULL,
    [Address]    NVARCHAR (250) NOT NULL,
    CONSTRAINT [PK_Customer] PRIMARY KEY CLUSTERED ([CustomerID] ASC)
);


GO
PRINT N'Creating [dbo].[Level]...';


GO
CREATE TABLE [dbo].[Level] (
    [levelID]     TINYINT       IDENTITY (1, 1) NOT NULL,
    [description] VARCHAR (120) NOT NULL,
    CONSTRAINT [PK_Level] PRIMARY KEY CLUSTERED ([levelID] ASC)
);


GO
PRINT N'Creating [dbo].[Session]...';


GO
CREATE TABLE [dbo].[Session] (
    [sessionID]       INT             IDENTITY (1, 1) NOT NULL,
    [title]           NVARCHAR (100)  NOT NULL,
    [abstract]        NVARCHAR (4000) NOT NULL,
    [speakerID]       INT             NOT NULL,
    [dateSession]     DATE            NOT NULL,
    [scheduleSession] DATETIME        NOT NULL,
    [duration]        SMALLINT        NOT NULL,
    [levelID]         TINYINT         NOT NULL,
    [trackID]         TINYINT         NOT NULL,
    [observation]     VARCHAR (200)   NULL,
    [sqlSatEventId]   INT             NULL,
    CONSTRAINT [PK_Session] PRIMARY KEY CLUSTERED ([sessionID] ASC),
    CONSTRAINT [Unq_Session_speakerID] UNIQUE NONCLUSTERED ([speakerID] ASC)
);


GO
PRINT N'Creating [dbo].[Speaker]...';


GO
CREATE TABLE [dbo].[Speaker] (
    [speakerID]   INT            IDENTITY (1, 1) NOT NULL,
    [firstName]   NVARCHAR (100) NOT NULL,
    [lastName]    NVARCHAR (100) NOT NULL,
    [biography]   VARCHAR (250)  NULL,
    [email]       VARCHAR (100)  NULL,
    [website]     VARCHAR (120)  NULL,
    [linkedin]    VARCHAR (100)  NULL,
    [twitter]     VARCHAR (120)  NULL,
    [observation] VARCHAR (200)  NULL,
    CONSTRAINT [PK_Speaker] PRIMARY KEY CLUSTERED ([speakerID] ASC)
);


GO
PRINT N'Creating [dbo].[SQLSatEvent]...';


GO
CREATE TABLE [dbo].[SQLSatEvent] (
    [sqlSatEventID] INT           IDENTITY (1, 1) NOT NULL,
    [eventName]     VARCHAR (100) NOT NULL,
    [countryID]     SMALLINT      NOT NULL,
    [EventDate]     DATE          NOT NULL,
    [place]         VARCHAR (100) NOT NULL,
    [organizer]     VARCHAR (150) NOT NULL,
    [email]         VARCHAR (60)  NOT NULL,
    [website]       VARCHAR (75)  NOT NULL,
    CONSTRAINT [PK_SQLSatEvent_sqlSatEventID] PRIMARY KEY CLUSTERED ([sqlSatEventID] ASC)
);


GO
PRINT N'Creating [dbo].[Supplier]...';


GO
CREATE TABLE [dbo].[Supplier] (
    [SupplierID] INT            NOT NULL,
    [Name]       NVARCHAR (200) NOT NULL,
    [Phone]      NVARCHAR (25)  NOT NULL,
    [Email]      VARCHAR (50)   NULL,
    [Address]    NVARCHAR (250) NOT NULL,
    CONSTRAINT [PK_Supplier] PRIMARY KEY CLUSTERED ([SupplierID] ASC)
);


GO
PRINT N'Creating [dbo].[Track]...';


GO
CREATE TABLE [dbo].[Track] (
    [trackID]     TINYINT       IDENTITY (1, 1) NOT NULL,
    [description] VARCHAR (150) NOT NULL,
    CONSTRAINT [PK_Track] PRIMARY KEY CLUSTERED ([trackID] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Country]...';


GO
ALTER TABLE [dbo].[Country]
    ADD DEFAULT ('') FOR [countryCode];


GO
PRINT N'Creating unnamed constraint on [dbo].[Country]...';


GO
ALTER TABLE [dbo].[Country]
    ADD DEFAULT ('') FOR [countryName];


GO
PRINT N'Creating [dbo].[FK_Session_Level]...';


GO
ALTER TABLE [dbo].[Session] WITH NOCHECK
    ADD CONSTRAINT [FK_Session_Level] FOREIGN KEY ([levelID]) REFERENCES [dbo].[Level] ([levelID]);


GO
PRINT N'Creating [dbo].[Fk_Session_Speaker]...';


GO
ALTER TABLE [dbo].[Session] WITH NOCHECK
    ADD CONSTRAINT [Fk_Session_Speaker] FOREIGN KEY ([speakerID]) REFERENCES [dbo].[Speaker] ([speakerID]);


GO
PRINT N'Creating [dbo].[Fk_Session_SQLSatEvent]...';


GO
ALTER TABLE [dbo].[Session] WITH NOCHECK
    ADD CONSTRAINT [Fk_Session_SQLSatEvent] FOREIGN KEY ([sqlSatEventId]) REFERENCES [dbo].[SQLSatEvent] ([sqlSatEventID]);


GO
PRINT N'Creating [dbo].[FK_Session_Track]...';


GO
ALTER TABLE [dbo].[Session] WITH NOCHECK
    ADD CONSTRAINT [FK_Session_Track] FOREIGN KEY ([trackID]) REFERENCES [dbo].[Track] ([trackID]);


GO
PRINT N'Creating [dbo].[FK_SQLSatEvent_Country]...';


GO
ALTER TABLE [dbo].[SQLSatEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_SQLSatEvent_Country] FOREIGN KEY ([countryID]) REFERENCES [dbo].[Country] ([countryId]);


GO
PRINT N'Creating [dbo].[usp_GetErrorInfo]...';


GO

	CREATE PROCEDURE usp_GetErrorInfo
	AS
	SELECT
		ERROR_NUMBER() AS ErrorNumber
		,ERROR_SEVERITY() AS ErrorSeverity
		,ERROR_STATE() AS ErrorState
		,ERROR_PROCEDURE() AS ErrorProcedure
		,ERROR_LINE() AS ErrorLine
		,ERROR_MESSAGE() AS ErrorMessage;
GO
PRINT N'Creating [dbo].[usp_getSpeakerById]...';


GO


      CREATE PROCEDURE dbo.usp_getSpeakerById
          @speakerId INT
      AS
      BEGIN TRY

        SELECT speakerID
               ,firstName + ' ' + lastName as name
               ,email
               ,website,
               observation
        FROM Speaker
        WHERE speakerID = @speakerId;

        END TRY

        BEGIN CATCH
          -- Execute error retrieval routine.
          EXECUTE usp_GetErrorInfo;
        END CATCH
GO
